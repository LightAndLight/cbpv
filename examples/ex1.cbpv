data Sum (a : Val) (b : Val) = Left[a] | Right[b]

sumElim = {
  #
    \@(a : Val) ->
    \@(b : Val) ->
    \@(r : Comp) ->
    \(f : U (a -> r)) ->
    \(g : U (b -> r)) ->
    \(x : Sum a b) ->
    case x of { 
      Left[a] -> ^f a; 
      Right[a] -> ^g a 
    } 
}

data Tensor (a : Val) (b : Val) = Tensor[a, b]

tensorElim = {
  #
    \@(a : Val) ->
    \@(b : Val) ->
    \@(r : Comp) ->
    \(f : U (a -> b -> r)) ->
    \(x : Tensor a b) -> 
    case x of { Tensor[a, b] -> ^f a b } 
}

data Nat = Z[] | S[Nat]

data List (a : Val) = Nil[] | Cons[a, List a]

codata Pair (a : Comp) (b : Comp) where {
  fst[] : a;
  snd[] : b
}

codata Stream (a : Comp) where {
  head[] : a;
  tail[] : Stream a
}

takeS = {
  #
  fix self : U (forall (a : Comp). Nat -> U (Stream a) -> F (List (U a))) in
  \@(a : Comp) ->
  \(n : Nat) ->
  \(s : U (Stream a)) ->
  case n of {
    Z[] -> return[Nil[] : List (U a)]; 
    S[k] -> 
      bind 
        rest = ^self @a k (# ^s.tail[])
      in
        return[ Cons[ thunk[ ^s.head[] ], rest ] : List (U a) ]
  }
}

codata AlephNull where { next[] : AlephNull }
  
infinity = # fix self : U AlephNull in cocase AlephNull of { next[] -> ^self }

countFrom = {
  #
  fix self : U (Nat -> Stream (F Nat)) in
    \(n : Nat) -> 
    cocase Stream (F Nat) of { 
      head[] -> return[n]; 
      tail[] -> ^self S[n]
    }
}